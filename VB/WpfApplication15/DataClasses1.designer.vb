'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning disable 1591
'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.1
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------


Imports Microsoft.VisualBasic
	Imports System.Data.Linq
	Imports System.Data.Linq.Mapping
	Imports System.Data
	Imports System.Collections.Generic
	Imports System.Reflection
	Imports System.Linq
	Imports System.Linq.Expressions
	Imports System.ComponentModel
	Imports System
Namespace WpfApplication15


	<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="AdventureWorks")> _
	Partial Public Class DataClasses1DataContext
		Inherits System.Data.Linq.DataContext

		Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub InsertProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub UpdateProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub DeleteProduct(ByVal instance As Product)
	End Sub
	Partial Private Sub InsertProductModel(ByVal instance As ProductModel)
	End Sub
	Partial Private Sub UpdateProductModel(ByVal instance As ProductModel)
	End Sub
	Partial Private Sub DeleteProductModel(ByVal instance As ProductModel)
	End Sub
	#End Region

		Public Sub New()
			MyBase.New(My.Settings.Default.AdventureWorksConnectionString, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
			MyBase.New(connection, mappingSource)
			OnCreated()
		End Sub

		Public ReadOnly Property Products() As System.Data.Linq.Table(Of Product)
			Get
				Return Me.GetTable(Of Product)()
			End Get
		End Property

		Public ReadOnly Property ProductModels() As System.Data.Linq.Table(Of ProductModel)
			Get
				Return Me.GetTable(Of ProductModel)()
			End Get
		End Property
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Production.Product")> _
	Partial Public Class Product
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductID As Integer

		Private _Name As String

		Private _ProductNumber As String

		Private _MakeFlag As Boolean

		Private _FinishedGoodsFlag As Boolean

		Private _Color As String

		Private _SafetyStockLevel As Short

		Private _ReorderPoint As Short

		Private _StandardCost As Decimal

		Private _ListPrice As Decimal

		Private _Size As String

		Private _SizeUnitMeasureCode As String

		Private _WeightUnitMeasureCode As String

		Private _Weight? As Decimal

		Private _DaysToManufacture As Integer

		Private _ProductLine As String

		Private _Class As String

		Private _Style As String

		Private _ProductSubcategoryID? As Integer

		Private _ProductModelID? As Integer

		Private _SellStartDate As System.DateTime

		Private _SellEndDate? As System.DateTime

		Private _DiscontinuedDate? As System.DateTime

		Private _rowguid As System.Guid

		Private _ModifiedDate As System.DateTime

		Private _ProductModel As EntityRef(Of ProductModel)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductIDChanged()
	End Sub
	Partial Private Sub OnNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNameChanged()
	End Sub
	Partial Private Sub OnProductNumberChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductNumberChanged()
	End Sub
	Partial Private Sub OnMakeFlagChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnMakeFlagChanged()
	End Sub
	Partial Private Sub OnFinishedGoodsFlagChanging(ByVal value As Boolean)
	End Sub
	Partial Private Sub OnFinishedGoodsFlagChanged()
	End Sub
	Partial Private Sub OnColorChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnColorChanged()
	End Sub
	Partial Private Sub OnSafetyStockLevelChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnSafetyStockLevelChanged()
	End Sub
	Partial Private Sub OnReorderPointChanging(ByVal value As Short)
	End Sub
	Partial Private Sub OnReorderPointChanged()
	End Sub
	Partial Private Sub OnStandardCostChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnStandardCostChanged()
	End Sub
	Partial Private Sub OnListPriceChanging(ByVal value As Decimal)
	End Sub
	Partial Private Sub OnListPriceChanged()
	End Sub
	Partial Private Sub OnSizeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSizeChanged()
	End Sub
	Partial Private Sub OnSizeUnitMeasureCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnSizeUnitMeasureCodeChanged()
	End Sub
	Partial Private Sub OnWeightUnitMeasureCodeChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnWeightUnitMeasureCodeChanged()
	End Sub
	Partial Private Sub OnWeightChanging(ByVal value? As Decimal)
	End Sub
	Partial Private Sub OnWeightChanged()
	End Sub
	Partial Private Sub OnDaysToManufactureChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnDaysToManufactureChanged()
	End Sub
	Partial Private Sub OnProductLineChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnProductLineChanged()
	End Sub
	Partial Private Sub OnClassChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnClassChanged()
	End Sub
	Partial Private Sub OnStyleChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnStyleChanged()
	End Sub
	Partial Private Sub OnProductSubcategoryIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnProductSubcategoryIDChanged()
	End Sub
	Partial Private Sub OnProductModelIDChanging(ByVal value? As Integer)
	End Sub
	Partial Private Sub OnProductModelIDChanged()
	End Sub
	Partial Private Sub OnSellStartDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnSellStartDateChanged()
	End Sub
	Partial Private Sub OnSellEndDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnSellEndDateChanged()
	End Sub
	Partial Private Sub OnDiscontinuedDateChanging(ByVal value? As System.DateTime)
	End Sub
	Partial Private Sub OnDiscontinuedDateChanged()
	End Sub
	Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
	End Sub
	Partial Private Sub OnrowguidChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._ProductModel = Nothing
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductID() As Integer
			Get
				Return Me._ProductID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductID <> value) Then
					Me.OnProductIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductID = value
					Me.SendPropertyChanged("ProductID")
					Me.OnProductIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set(ByVal value As String)
				If (Me._Name <> value) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging()
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductNumber", DbType:="NVarChar(25) NOT NULL", CanBeNull:=False)> _
		Public Property ProductNumber() As String
			Get
				Return Me._ProductNumber
			End Get
			Set(ByVal value As String)
				If (Me._ProductNumber <> value) Then
					Me.OnProductNumberChanging(value)
					Me.SendPropertyChanging()
					Me._ProductNumber = value
					Me.SendPropertyChanged("ProductNumber")
					Me.OnProductNumberChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MakeFlag", DbType:="Bit NOT NULL")> _
		Public Property MakeFlag() As Boolean
			Get
				Return Me._MakeFlag
			End Get
			Set(ByVal value As Boolean)
				If (Me._MakeFlag <> value) Then
					Me.OnMakeFlagChanging(value)
					Me.SendPropertyChanging()
					Me._MakeFlag = value
					Me.SendPropertyChanged("MakeFlag")
					Me.OnMakeFlagChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FinishedGoodsFlag", DbType:="Bit NOT NULL")> _
		Public Property FinishedGoodsFlag() As Boolean
			Get
				Return Me._FinishedGoodsFlag
			End Get
			Set(ByVal value As Boolean)
				If (Me._FinishedGoodsFlag <> value) Then
					Me.OnFinishedGoodsFlagChanging(value)
					Me.SendPropertyChanging()
					Me._FinishedGoodsFlag = value
					Me.SendPropertyChanged("FinishedGoodsFlag")
					Me.OnFinishedGoodsFlagChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Color", DbType:="NVarChar(15)")> _
		Public Property Color() As String
			Get
				Return Me._Color
			End Get
			Set(ByVal value As String)
				If (Me._Color <> value) Then
					Me.OnColorChanging(value)
					Me.SendPropertyChanging()
					Me._Color = value
					Me.SendPropertyChanged("Color")
					Me.OnColorChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SafetyStockLevel", DbType:="SmallInt NOT NULL")> _
		Public Property SafetyStockLevel() As Short
			Get
				Return Me._SafetyStockLevel
			End Get
			Set(ByVal value As Short)
				If (Me._SafetyStockLevel <> value) Then
					Me.OnSafetyStockLevelChanging(value)
					Me.SendPropertyChanging()
					Me._SafetyStockLevel = value
					Me.SendPropertyChanged("SafetyStockLevel")
					Me.OnSafetyStockLevelChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ReorderPoint", DbType:="SmallInt NOT NULL")> _
		Public Property ReorderPoint() As Short
			Get
				Return Me._ReorderPoint
			End Get
			Set(ByVal value As Short)
				If (Me._ReorderPoint <> value) Then
					Me.OnReorderPointChanging(value)
					Me.SendPropertyChanging()
					Me._ReorderPoint = value
					Me.SendPropertyChanged("ReorderPoint")
					Me.OnReorderPointChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StandardCost", DbType:="Money NOT NULL")> _
		Public Property StandardCost() As Decimal
			Get
				Return Me._StandardCost
			End Get
			Set(ByVal value As Decimal)
				If (Me._StandardCost <> value) Then
					Me.OnStandardCostChanging(value)
					Me.SendPropertyChanging()
					Me._StandardCost = value
					Me.SendPropertyChanged("StandardCost")
					Me.OnStandardCostChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ListPrice", DbType:="Money NOT NULL")> _
		Public Property ListPrice() As Decimal
			Get
				Return Me._ListPrice
			End Get
			Set(ByVal value As Decimal)
				If (Me._ListPrice <> value) Then
					Me.OnListPriceChanging(value)
					Me.SendPropertyChanging()
					Me._ListPrice = value
					Me.SendPropertyChanged("ListPrice")
					Me.OnListPriceChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Size", DbType:="NVarChar(5)")> _
		Public Property Size() As String
			Get
				Return Me._Size
			End Get
			Set(ByVal value As String)
				If (Me._Size <> value) Then
					Me.OnSizeChanging(value)
					Me.SendPropertyChanging()
					Me._Size = value
					Me.SendPropertyChanged("Size")
					Me.OnSizeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SizeUnitMeasureCode", DbType:="NChar(3)")> _
		Public Property SizeUnitMeasureCode() As String
			Get
				Return Me._SizeUnitMeasureCode
			End Get
			Set(ByVal value As String)
				If (Me._SizeUnitMeasureCode <> value) Then
					Me.OnSizeUnitMeasureCodeChanging(value)
					Me.SendPropertyChanging()
					Me._SizeUnitMeasureCode = value
					Me.SendPropertyChanged("SizeUnitMeasureCode")
					Me.OnSizeUnitMeasureCodeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightUnitMeasureCode", DbType:="NChar(3)")> _
		Public Property WeightUnitMeasureCode() As String
			Get
				Return Me._WeightUnitMeasureCode
			End Get
			Set(ByVal value As String)
				If (Me._WeightUnitMeasureCode <> value) Then
					Me.OnWeightUnitMeasureCodeChanging(value)
					Me.SendPropertyChanging()
					Me._WeightUnitMeasureCode = value
					Me.SendPropertyChanged("WeightUnitMeasureCode")
					Me.OnWeightUnitMeasureCodeChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Weight", DbType:="Decimal(8,2)")> _
		Public Property Weight() As Decimal?
			Get
				Return Me._Weight
			End Get
			Set(ByVal value? As Decimal)
				If (Not Me._Weight.Equals(value)) Then
					Me.OnWeightChanging(value)
					Me.SendPropertyChanging()
					Me._Weight = value
					Me.SendPropertyChanged("Weight")
					Me.OnWeightChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DaysToManufacture", DbType:="Int NOT NULL")> _
		Public Property DaysToManufacture() As Integer
			Get
				Return Me._DaysToManufacture
			End Get
			Set(ByVal value As Integer)
				If (Me._DaysToManufacture <> value) Then
					Me.OnDaysToManufactureChanging(value)
					Me.SendPropertyChanging()
					Me._DaysToManufacture = value
					Me.SendPropertyChanged("DaysToManufacture")
					Me.OnDaysToManufactureChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductLine", DbType:="NChar(2)")> _
		Public Property ProductLine() As String
			Get
				Return Me._ProductLine
			End Get
			Set(ByVal value As String)
				If (Me._ProductLine <> value) Then
					Me.OnProductLineChanging(value)
					Me.SendPropertyChanging()
					Me._ProductLine = value
					Me.SendPropertyChanged("ProductLine")
					Me.OnProductLineChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Class", DbType:="NChar(2)")> _
		Public Property [Class]() As String
			Get
				Return Me._Class
			End Get
			Set(ByVal value As String)
				If (Me._Class <> value) Then
					Me.OnClassChanging(value)
					Me.SendPropertyChanging()
					Me._Class = value
					Me.SendPropertyChanged("Class")
					Me.OnClassChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Style", DbType:="NChar(2)")> _
		Public Property Style() As String
			Get
				Return Me._Style
			End Get
			Set(ByVal value As String)
				If (Me._Style <> value) Then
					Me.OnStyleChanging(value)
					Me.SendPropertyChanging()
					Me._Style = value
					Me.SendPropertyChanged("Style")
					Me.OnStyleChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductSubcategoryID", DbType:="Int")> _
		Public Property ProductSubcategoryID() As Integer?
			Get
				Return Me._ProductSubcategoryID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ProductSubcategoryID.Equals(value)) Then
					Me.OnProductSubcategoryIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductSubcategoryID = value
					Me.SendPropertyChanged("ProductSubcategoryID")
					Me.OnProductSubcategoryIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductModelID", DbType:="Int")> _
		Public Property ProductModelID() As Integer?
			Get
				Return Me._ProductModelID
			End Get
			Set(ByVal value? As Integer)
				If (Not Me._ProductModelID.Equals(value)) Then
					If Me._ProductModel.HasLoadedOrAssignedValue Then
						Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
					End If
					Me.OnProductModelIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductModelID = value
					Me.SendPropertyChanged("ProductModelID")
					Me.OnProductModelIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellStartDate", DbType:="DateTime NOT NULL")> _
		Public Property SellStartDate() As System.DateTime
			Get
				Return Me._SellStartDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._SellStartDate <> value) Then
					Me.OnSellStartDateChanging(value)
					Me.SendPropertyChanging()
					Me._SellStartDate = value
					Me.SendPropertyChanged("SellStartDate")
					Me.OnSellStartDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellEndDate", DbType:="DateTime")> _
		Public Property SellEndDate() As System.DateTime?
			Get
				Return Me._SellEndDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._SellEndDate.Equals(value)) Then
					Me.OnSellEndDateChanging(value)
					Me.SendPropertyChanging()
					Me._SellEndDate = value
					Me.SendPropertyChanged("SellEndDate")
					Me.OnSellEndDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DiscontinuedDate", DbType:="DateTime")> _
		Public Property DiscontinuedDate() As System.DateTime?
			Get
				Return Me._DiscontinuedDate
			End Get
			Set(ByVal value? As System.DateTime)
				If (Not Me._DiscontinuedDate.Equals(value)) Then
					Me.OnDiscontinuedDateChanging(value)
					Me.SendPropertyChanging()
					Me._DiscontinuedDate = value
					Me.SendPropertyChanged("DiscontinuedDate")
					Me.OnDiscontinuedDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
		Public Property rowguid() As System.Guid
			Get
				Return Me._rowguid
			End Get
			Set(ByVal value As System.Guid)
				If (Me._rowguid <> value) Then
					Me.OnrowguidChanging(value)
					Me.SendPropertyChanging()
					Me._rowguid = value
					Me.SendPropertyChanged("rowguid")
					Me.OnrowguidChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductModel_Product", Storage:="_ProductModel", ThisKey:="ProductModelID", OtherKey:="ProductModelID", IsForeignKey:=True)> _
		Public Property ProductModel() As ProductModel
			Get
				Return Me._ProductModel.Entity
			End Get
			Set(ByVal value As ProductModel)
				Dim previousValue As ProductModel = Me._ProductModel.Entity
				If ((previousValue IsNot value) OrElse (Me._ProductModel.HasLoadedOrAssignedValue = False)) Then
					Me.SendPropertyChanging()
					If (previousValue IsNot Nothing) Then
						Me._ProductModel.Entity = Nothing
						previousValue.Products.Remove(Me)
					End If
					Me._ProductModel.Entity = value
					If (value IsNot Nothing) Then
						value.Products.Add(Me)
						Me._ProductModelID = value.ProductModelID
					Else
						Me._ProductModelID = Nothing
					End If
					Me.SendPropertyChanged("ProductModel")
				End If
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub
	End Class

	<Global.System.Data.Linq.Mapping.TableAttribute(Name:="Production.ProductModel")> _
	Partial Public Class ProductModel
		Implements INotifyPropertyChanging, INotifyPropertyChanged

		Private Shared emptyChangingEventArgs As New PropertyChangingEventArgs(String.Empty)

		Private _ProductModelID As Integer

		Private _Name As String

		Private _CatalogDescription As System.Xml.Linq.XElement

		Private _Instructions As System.Xml.Linq.XElement

		Private _rowguid As System.Guid

		Private _ModifiedDate As System.DateTime

		Private _Products As EntitySet(Of Product)

	#Region "Extensibility Method Definitions"
	Partial Private Sub OnLoaded()
	End Sub
	Partial Private Sub OnValidate(ByVal action As System.Data.Linq.ChangeAction)
	End Sub
	Partial Private Sub OnCreated()
	End Sub
	Partial Private Sub OnProductModelIDChanging(ByVal value As Integer)
	End Sub
	Partial Private Sub OnProductModelIDChanged()
	End Sub
	Partial Private Sub OnNameChanging(ByVal value As String)
	End Sub
	Partial Private Sub OnNameChanged()
	End Sub
	Partial Private Sub OnCatalogDescriptionChanging(ByVal value As System.Xml.Linq.XElement)
	End Sub
	Partial Private Sub OnCatalogDescriptionChanged()
	End Sub
	Partial Private Sub OnInstructionsChanging(ByVal value As System.Xml.Linq.XElement)
	End Sub
	Partial Private Sub OnInstructionsChanged()
	End Sub
	Partial Private Sub OnrowguidChanging(ByVal value As System.Guid)
	End Sub
	Partial Private Sub OnrowguidChanged()
	End Sub
	Partial Private Sub OnModifiedDateChanging(ByVal value As System.DateTime)
	End Sub
	Partial Private Sub OnModifiedDateChanged()
	End Sub
	#End Region

		Public Sub New()
			Me._Products = New EntitySet(Of Product)(New Action(Of Product)(AddressOf Me.attach_Products), New Action(Of Product)(AddressOf Me.detach_Products))
			OnCreated()
		End Sub

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductModelID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=True, IsDbGenerated:=True)> _
		Public Property ProductModelID() As Integer
			Get
				Return Me._ProductModelID
			End Get
			Set(ByVal value As Integer)
				If (Me._ProductModelID <> value) Then
					Me.OnProductModelIDChanging(value)
					Me.SendPropertyChanging()
					Me._ProductModelID = value
					Me.SendPropertyChanged("ProductModelID")
					Me.OnProductModelIDChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="NVarChar(50) NOT NULL", CanBeNull:=False)> _
		Public Property Name() As String
			Get
				Return Me._Name
			End Get
			Set(ByVal value As String)
				If (Me._Name <> value) Then
					Me.OnNameChanging(value)
					Me.SendPropertyChanging()
					Me._Name = value
					Me.SendPropertyChanged("Name")
					Me.OnNameChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatalogDescription", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)> _
		Public Property CatalogDescription() As System.Xml.Linq.XElement
			Get
				Return Me._CatalogDescription
			End Get
			Set(ByVal value As System.Xml.Linq.XElement)
				If (Me._CatalogDescription IsNot value) Then
					Me.OnCatalogDescriptionChanging(value)
					Me.SendPropertyChanging()
					Me._CatalogDescription = value
					Me.SendPropertyChanged("CatalogDescription")
					Me.OnCatalogDescriptionChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Instructions", DbType:="Xml", UpdateCheck:=UpdateCheck.Never)> _
		Public Property Instructions() As System.Xml.Linq.XElement
			Get
				Return Me._Instructions
			End Get
			Set(ByVal value As System.Xml.Linq.XElement)
				If (Me._Instructions IsNot value) Then
					Me.OnInstructionsChanging(value)
					Me.SendPropertyChanging()
					Me._Instructions = value
					Me.SendPropertyChanged("Instructions")
					Me.OnInstructionsChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_rowguid", DbType:="UniqueIdentifier NOT NULL")> _
		Public Property rowguid() As System.Guid
			Get
				Return Me._rowguid
			End Get
			Set(ByVal value As System.Guid)
				If (Me._rowguid <> value) Then
					Me.OnrowguidChanging(value)
					Me.SendPropertyChanging()
					Me._rowguid = value
					Me.SendPropertyChanged("rowguid")
					Me.OnrowguidChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ModifiedDate", DbType:="DateTime NOT NULL")> _
		Public Property ModifiedDate() As System.DateTime
			Get
				Return Me._ModifiedDate
			End Get
			Set(ByVal value As System.DateTime)
				If (Me._ModifiedDate <> value) Then
					Me.OnModifiedDateChanging(value)
					Me.SendPropertyChanging()
					Me._ModifiedDate = value
					Me.SendPropertyChanged("ModifiedDate")
					Me.OnModifiedDateChanged()
				End If
			End Set
		End Property

		<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductModel_Product", Storage:="_Products", ThisKey:="ProductModelID", OtherKey:="ProductModelID")> _
		Public Property Products() As EntitySet(Of Product)
			Get
				Return Me._Products
			End Get
			Set(ByVal value As EntitySet(Of Product))
				Me._Products.Assign(value)
			End Set
		End Property

		Public Event PropertyChanging As PropertyChangingEventHandler Implements INotifyPropertyChanging.PropertyChanging

		Public Event PropertyChanged As PropertyChangedEventHandler Implements INotifyPropertyChanged.PropertyChanged

		Protected Overridable Sub SendPropertyChanging()
			If (Me.PropertyChangingEvent IsNot Nothing) Then
				RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
			End If
		End Sub

		Protected Overridable Sub SendPropertyChanged(ByVal propertyName As String)
			If (Me.PropertyChangedEvent IsNot Nothing) Then
				RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
			End If
		End Sub

		Private Sub attach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.ProductModel = Me
		End Sub

		Private Sub detach_Products(ByVal entity As Product)
			Me.SendPropertyChanging()
			entity.ProductModel = Nothing
		End Sub
	End Class
End Namespace
'INSTANT VB TODO TASK: There is no equivalent to #pragma directives in VB.NET:
'#pragma warning restore 1591
